for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
responses$Condition=recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData='2_data/'
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
summary(responses)
nrow(responses)
responses$Condition=recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$Condition=plyr::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
??recode
recode
responses$Condition=car::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=car::recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
summary(responses)
responses=filter(responses,experiment=='til')
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
responses$Trochaic=ifelse(responses$response=='(x X)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
responses$Trochaic=ifelse(responses$response=='(X x)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_grid(. ~ StimulusSet)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
library(lme4)
library(languageR)
library(reshape)
library(ggplot2)
library(scales)
library(texreg)
library(plyr)
library(car)
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
#d=subset(d,!is.na(testing))
d$testing[audioFile=='identical.wav']=='control'
d$testing=factor(d$testing)
d$TrocheeResponse=ifelse(d$toneSelected=='1',1,0)
d$difference=factor(d$difference)
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
list.files()
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
setwd("~/Dropbox/Students/jezewski_til/9_til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
d$testing[audioFile=='identical.wav']=='control'
d$testing=factor(d$testing)
d$TrocheeResponse=ifelse(d$toneSelected=='1',1,0)
d$difference=factor(d$difference)
d$testing[d$audioFile=='identical.wav']=='control'
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
summary(d)
head(d)
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480_v2")
setwd("/Users/chael/Dropbox/students/jezewski_til/10_til_replicate_freq480_v2")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_results_proc_v2.txt",sep=""),sep = "\t")
#d=subset(d,!is.na(testing))
d$manipulation=as.character(d$manipulation)
d$manipulation[d$audioFile=='identical.wav']='control'
d=subset(d,manipulation %in% c('control','duration','gain'))
d$manipulation=factor(d$manipulation)
d$TrocheeResponse=ifelse(d$response=='1',1,0)
d$difference=factor(d$difference)
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
library(lme4)
library(languageR)
library(reshape)
library(ggplot2)
library(scales)
library(texreg)
library(plyr)
library(car)
# setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData='2_data/'
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
responses$Condition=car::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=car::recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
responses=filter(responses,experiment=='til')
responses$Trochaic=ifelse(responses$response=='(X x)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
#
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_grid(. ~ StimulusSet)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=StimulusSet, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_wrap(~participant)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_wrap(~participant)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
source('~/.active-rstudio-document', echo=TRUE)
2076/117.5
118*17.67
library(lme4)
library(lmerTest)
library(arm)
library(ggplot2)
library(lattice)
library(car)
library(sjPlot)
library(psych)
library(rpart)
library(rpart.plot)
library(party)
library(grid)
library(gridExtra)
library(tidyr)
library(dplyr)
library(xtable)
source('dimHelper.R')
source('dimDataPrep.R')
source('dimForest.R')
shortForm= read.csv(file = '~/Google Drive/work/Lab/LanguageQuestionaires/dataProcessed/lq_shortform_2019_Sep.txt',sep = "\t")
shortForm= read.csv(file = '~/Google\ Drive/work_shared/Lab/LanguageQuestionaires/dataProcessed/lq_shortform_2019_Sep.txt',sep = "\t")
shortForm = dplyr::filter(shortForm,Participant %in% chessWithin$participant)
library(ggplot2)
library(dplyr)
library(tidyr)
convertVariables <- function(df) {
# columns that are usually read as factors but should be numeric:
numericCols = c("duration", "silence", "duraSil", "phoneLength", "meanPitch", "maxPitch", "maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time", "pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time", "pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time", "pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10", "pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime", "intensity1", "intensity1_time", "intensity2", "intensity2_time", "intensity3", "intensity3_time", "intensity4", "intensity4_time", "intensity5", "intensity5_time", "intensity6", "intensity6_time", "intensity7", "intensity7_time", "intensity8", "intensity8_time", "intensity9", "intensity9_time", "intensity10", "intensity10_time", "zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch", "zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity", "zmaxIntensity", "zmaxIntTime", "response", "duration", "silence", "durasil", "meanpitch", "maxpitch", "maxPitTime", "minPitch", "minPitTime", "firstpitch", "secondpitch", "thirdpitch", "fourthpitch", "meanIntensity", "maxIntensity", "zduration", "zbeginzone", "zendzone", "zphonelength", "zmeanpitch", "zmaxpitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zfirstpitch", "zsecondpitch", "zthirdpitch", "zfourthpitch", "zmeanIntensity", "zmaxIntensity", "durasil", "meanpit", "maxpitch", "maxPitTime", "minpitch", "minPitTime", "firstpitch", "secondpitch", "thirdpitch", "fourthpitch", "meanIntensity", "maxIntensity", "firstF1", "firstF2", "firstdif", "secondF1", "secondF2", "seconddif", "thirdF1", "thirdF2", "thirddif", "fourthF1", "fourthF2", "fourthdif", "fifthF1", "fifthF2", "fifthdif", "trialDuration", "response2")
nColumns = ncol(df)
# convert to numeric column, otherwise treat as factor:
for (i in 1:nColumns) {
if (colnames(df)[i] %in% numericCols) {
df[, i] <- as.numeric(as.character(df[, i]))
} else {
df[, i] <- as.factor(as.character(df[, i]))
}
}
return(df)
}
###########
#
# chessLESL : English_ESL_Latinsquare (chess_french_eng)
chessLESL <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_ESL_Latinsquare_(chess_french_eng)/3_annotate_sonora/chess_responses_sonora.txt",sep="\t")
chessLESL$experiment='chessLESL'
chessLESL$recordedFile=gsub("chess_", "chessLESL_", chessLESL$recordedFile)
chessLESL$Design='Latinsquare'
chessLESL$Language='English'
chessLESL$Tag='None'
#
###########
#
# chessL : English_Latinsquare (chess_english)
chessL <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_Latinsquare_(chess_english)/3_annotate_sonora/chess_responses_sonora.txt",sep="\t")
chessL$experiment='chessL'
chessL$recordedFile=gsub("chess_", "chessL_", chessL$recordedFile)
chessL$Design='Latinsquare'
chessL$Language='English'
chessL$Tag='None'
#
###########
#
# chessL2 : English_Latinsquare_2 (chess_2)
chessL2 <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_Latinsquare_2_(chess_2)/3_annotate_sonora/chess_responses_sonora.txt",sep="\t")
chessL2$experiment='chessL2'
chessL2$recordedFile=gsub("chess_", "chessL2_", chessL2$recordedFile)
chessL2$Design='Latinsquare'
chessL2$Language='English'
chessL2$Tag='Please'
#
###########
#
# chessLF : French_Latinsquare (chess french)
chessLF <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/French_Latinsquare_(chess_french)/3_annotate_sonora/chess_responses_sonora.txt",sep="\t")
chessLF$experiment='chessLF'
chessLF$recordedFile=gsub("chess_", "chessLF_", chessLF$recordedFile)
chessLF$Design='Latinsquare'
chessLF$Language='French'
chessLF$Tag='S\'il vous plait'
#
chessLatinsquare=rbind(chessLESL,chessL,chessL2,chessLF)
# rename column that labels condition:
names(chessLatinsquare)[names(chessLatinsquare) == 'condition.lab'] <- 'Pattern'
# we ran 83 unique participants in Latinsquare study:
length(unique(chessLatinsquare$participant))
# we have a total of 689 soundfiles:
nrow(chessLatinsquare)
chessLatinsquare=convertVariables(chessLatinsquare)
## code Sonora's annotation numerically:
chessLatinsquare$ProminenceShift=ifelse(chessLatinsquare$Sonora_Second=='Shift to letter',1,0)
# write.table(chessLatinsquare,file='chessLatinAnnotate.txt',sep='\t')
#############
####
#### Process acoustics
####
## ChessLESL
achessLESL <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_ESL_Latinsquare_(chess_french_eng)/5_acoustics/English_ESL_Latinsquare.txt",sep='\t')
achessLESL$experiment='chessLESL'
achessLESL$fileName=paste0(gsub("chess_", "chessLESL_", achessLESL$fileName),'.wav')
## ChessL
achessL <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_Latinsquare_(chess_english)/5_acoustics/English_Latinsquare.txt",sep='\t')
achessL$experiment='chessL'
achessL$fileName=paste0(gsub("chess_", "chessL_", achessL$fileName),'.wav')
## ChessL2
achessL2 <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/English_Latinsquare_2_(chess_2)/5_acoustics/English_Latinsquare_2.txt",sep='\t')
achessL2$experiment='chessL2'
achessL2$fileName=paste0(gsub("chess_", "chessL2_", achessL2$fileName),'.wav')
## ChessLF
achessLF <- read.csv("./1_OriginalExperiments/1_Experiment1_LatinSquare/French_Latinsquare_(chess_french)/5_acoustics/French_Latinsquare.txt",sep='\t')
achessLF=dplyr::filter(achessLF,!is.na(woiLabel))
achessLF$experiment='chessLF'
achessLF$fileName=paste0(gsub("chess_", "chessLF_", achessLF$fileName),'.wav')
acoustics=rbind(achessLESL,achessL,achessL2,achessLF)
acoustics=convertVariables(acoustics)
# drop fine grained measures within words for now
acoustics=dplyr::select(acoustics,
c("experiment", "participant", "item", "condition", "fileName",
"word", "wordLabel", "woiLabel", "wordOnset", "wordOffset", "duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime","meanIntensity", "maxIntensity", "maxIntTime")
)
# acoustics has one row per word of interest
# reshape acoustics to 'horizontal' shape with one row per soundfile
# dput(colnames(acoustics))
# this message occurs because not every utterance has every woi: "there are records with missing times, which will be dropped"
#
ac=reshape(acoustics,idvar=c("experiment", "participant","item","condition"),v.names=c("word", "wordLabel", "wordOnset", "wordOffset", "duration","silence", "duraSil", "phoneLength", "meanPitch", "maxPitch","maxPitTime","meanIntensity", "maxIntensity", "maxIntTime"),timevar="woiLabel",direction="wide")
# merge with data frame
chessLatinsquare <-merge(chessLatinsquare,ac,all.x=TRUE,by=c("experiment","item","condition","participant"),suffixes=c("",".other"))
# Relative measures first address (like move from D1)
chessLatinsquare$rpitch.First=12*log2(chessLatinsquare$maxPitch.3/chessLatinsquare$maxPitch.4)
# Relative duration (difference in log duration)
chessLatinsquare$rduration.First=log(chessLatinsquare$duration.3)-log(chessLatinsquare$duration.4)
# Relative intensity (difference)
chessLatinsquare$rintensity.First=chessLatinsquare$maxIntensity.3-chessLatinsquare$maxIntensity.4
# Relative measures second address (to G1)
chessLatinsquare$rpitch.Second=12*log2(chessLatinsquare$maxPitch.6/chessLatinsquare$maxPitch.7)
# Relative duration (difference in log duration)
chessLatinsquare$rduration.Second=log(chessLatinsquare$duration.6)-log(chessLatinsquare$duration.7)
# Relative intensity (difference)
chessLatinsquare$rintensity.Second=chessLatinsquare$maxIntensity.6-chessLatinsquare$maxIntensity.7
