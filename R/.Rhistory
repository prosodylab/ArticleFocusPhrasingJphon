Decl.vs.Inter+Left.vs.Right||participant),
)
summary(modelDuration2C)
sink("../Paper/Models/modelsDurationC.tex", append=FALSE, split=FALSE)
texreg(list(modelDuration1C,modelDuration2C),
label="modelDurationC",
custom.model.names=c("Initial","Final"),
naive=TRUE,single.row = T,
include.aic=F,
include.deviance=F,
include.bic=F,
include.loglik=F,
include.variance=F,
dcolumn=T,
include.nobs=F,
include.groups=F,
caption = "Mixed Effects Regression Models for the duration of word C (estimate in sec, SE in parentheses).",
use.packages=F,float.pos="h!",fontsize = "footnotesize",
# base stars on lmertest Sattersthwaite p-values:
override.pval=c(list(summary(modelDuration1C)$coefficients[,'Pr(>|t|)'],summary(modelDuration2C)$coefficients[,'Pr(>|t|)']))
# (warning for SE can be ignored--SEs in lmertest are identical)
)
sink()
#
# intensity model
#
modelIntensity1C=lmer(data=filter(dd1,Position=='C'),
Mean_Intensity~
(Broad.vs.Narrow+First.vs.Late+Second.vs.Third)*
Decl.vs.Inter*Left.vs.Right+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||itemOriginal)+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||participant),
)
summary(modelIntensity1C)
modelIntensity2C=lmer(data=filter(dd2,Position=='C'),
Mean_Intensity~
(Broad.vs.Narrow+First.vs.Late+Second.vs.Third)*
Decl.vs.Inter*Left.vs.Right+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||itemOriginal)+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||participant),
)
summary(modelIntensity2C)
sink("../Paper/Models/modelsIntensityC.tex", append=FALSE, split=FALSE)
texreg(list(modelIntensity1C,modelIntensity2C),
label="modelIntensityC",
custom.model.names=c("Initial","Final"),
naive=TRUE,single.row = T,
include.aic=F,
include.deviance=F,
include.bic=F,
include.loglik=F,
include.variance=F,
dcolumn=T,
include.nobs=F,
include.groups=F,
caption = "Mixed Effects Regression Models for the mean intensity of word C (estimate in dB, SE in parentheses).",use.packages=F,float.pos="h!",fontsize = "footnotesize",
# base stars on lmertest Sattersthwaite p-values:
override.pval=c(list(summary(modelIntensity1C)$coefficients[,'Pr(>|t|)'],summary(modelIntensity2C)$coefficients[,'Pr(>|t|)']))
# (warning for SE can be ignored--SEs in lmertest are identical)
)
sink()
#
# pitch model
#
modelPitch1C=lmer(data=filter(dd1,Position=='C'),
Max_F0~
(Broad.vs.Narrow+First.vs.Late+Second.vs.Third)*
Decl.vs.Inter*Left.vs.Right+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||itemOriginal)+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||participant),
)
summary(modelPitch1C)
modelPitch2C=lmer(data=filter(dd2,Position=='C'),
Max_F0~
(Broad.vs.Narrow+First.vs.Late+Second.vs.Third)*
Decl.vs.Inter*Left.vs.Right+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||itemOriginal)+
((Broad.vs.Narrow+First.vs.Late+Second.vs.Third)+
Decl.vs.Inter+Left.vs.Right||participant),
)
summary(modelPitch2C)
sink("../Paper/Models/modelsPitchC.tex", append=FALSE, split=FALSE)
texreg(list(modelPitch1C,modelPitch2C),
label="modelPitchC",
custom.model.names=c("Initial","Final"),
naive=TRUE,single.row = T,
include.aic=F,
include.deviance=F,
include.bic=F,
include.loglik=F,
include.variance=F,
dcolumn=T,
include.nobs=F,
include.groups=F,
caption = "Mixed Effects Regression Models for the mean F$_0$ of word C (estimate in Hz, SE in parentheses).",use.packages=F,float.pos="h!",fontsize = "footnotesize",
# base stars on lmertest Sattersthwaite p-values:
override.pval=c(list(summary(modelPitch1)$coefficients[,'Pr(>|t|)'],summary(modelPitch2)$coefficients[,'Pr(>|t|)']))
# (warning for SE can be ignored--SEs in lmertest are identical)
)
sink()
setwd("Dropbox/work_experiments/1_projects_25/4_til")
setwd("~/Dropbox/work_experiments/1_projects_25/4_til")
setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
setwd("~/Dropbox/work_experiments/1_projects_25/4_til")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData='2_data/'
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
responses$Condition=recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData='2_data/'
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
summary(responses)
nrow(responses)
responses$Condition=recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$Condition=plyr::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
??recode
recode
responses$Condition=car::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=car::recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
summary(responses)
responses=filter(responses,experiment=='til')
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
responses$Trochaic=ifelse(responses$response=='(x X)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
responses$Trochaic=ifelse(responses$response=='(X x)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_grid(. ~ StimulusSet)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
library(lme4)
library(languageR)
library(reshape)
library(ggplot2)
library(scales)
library(texreg)
library(plyr)
library(car)
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
#d=subset(d,!is.na(testing))
d$testing[audioFile=='identical.wav']=='control'
d$testing=factor(d$testing)
d$TrocheeResponse=ifelse(d$toneSelected=='1',1,0)
d$difference=factor(d$difference)
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
list.files()
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480")
setwd("~/Dropbox/Students/jezewski_til/9_til_replicate_freq480")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_proc.txt",sep=""),sep = "\t")
d$testing[audioFile=='identical.wav']=='control'
d$testing=factor(d$testing)
d$TrocheeResponse=ifelse(d$toneSelected=='1',1,0)
d$difference=factor(d$difference)
d$testing[d$audioFile=='identical.wav']=='control'
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
summary(d)
head(d)
setwd("~/Dropbox/Students/jezewski_til/til_replicate_freq480_v2")
setwd("/Users/chael/Dropbox/students/jezewski_til/10_til_replicate_freq480_v2")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData=''
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
d=read.csv(paste(pathData,"tils2_results_proc_v2.txt",sep=""),sep = "\t")
#d=subset(d,!is.na(testing))
d$manipulation=as.character(d$manipulation)
d$manipulation[d$audioFile=='identical.wav']='control'
d=subset(d,manipulation %in% c('control','duration','gain'))
d$manipulation=factor(d$manipulation)
d$TrocheeResponse=ifelse(d$response=='1',1,0)
d$difference=factor(d$difference)
dput(unique(d$audioFile))
d$audioFile=factor(d$audioFile,levels=c(
"duration_manipulatedTone1_25.wav", "duration_manipulatedTone1_50.wav",
"duration_manipulatedTone1_75.wav", "duration_manipulatedTone1_100.wav",
"duration_manipulatedTone2_25.wav", "duration_manipulatedTone2_50.wav",
"duration_manipulatedTone2_75.wav", "duration_manipulatedTone2_100.wav",
"gain_manipulatedTone1_3.wav", "gain_manipulatedTone1_6.wav",
"gain_manipulatedTone1_9.wav", "gain_manipulatedTone1_12.wav",
"gain_manipulatedTone2_3.wav", "gain_manipulatedTone2_6.wav",
"gain_manipulatedTone2_9.wav","gain_manipulatedTone2_12.wav", "identical.wav"))
dd=subset(d,testing!='gain')
dl=subset(d,testing!='duration')
ggplot(d, aes(x=audioFile, y=TrocheeResponse)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab('Loudness Manipulation')
library(lme4)
library(languageR)
library(reshape)
library(ggplot2)
library(scales)
library(texreg)
library(plyr)
library(car)
# setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
setwd("/Users/chael/Dropbox/students/jezewski_til/4_til")
pathPlots='3-plots-tables/'
pathTables='3-plots-tables/'
pathData='2_data/'
saveLatex <- function(model, name, captiontext, dv) {
sink(paste(pathTables, name, sep = ""), append = FALSE, split = FALSE)
stargazer(model, align = T, label = "bothboundariesModel", font.size = "small", single.row = T,
dep.var.labels = dv, title = captiontext, omit.stat = c("aic", "ll", "bic"))
sink()
}
convertVariables <- function(df){
# columns that are usually read as numeric but should be factors:
factorCols=c("experiment","item","condition","participant","playlist","word","woiLabel")
# columns that are usually read as factors but should be numeric:
numericCols=c("duration",
"silence", "duraSil", "phoneLength", "meanPitch", "maxPitch",
"maxPitTime", "minPitch", "minPitTime", "pitch1", "pitch1_time",
"pitch2", "pitch2_time", "pitch3", "pitch3_time", "pitch4", "pitch4_time",
"pitch5", "pitch5_time", "pitch6", "pitch6_time", "pitch7", "pitch7_time",
"pitch8", "pitch8_time", "pitch9", "pitch9_time", "pitch10",
"pitch10_time", "meanIntensity", "maxIntensity", "maxIntTime",
"intensity1", "intensity1_time", "intensity2", "intensity2_time",
"intensity3", "intensity3_time", "intensity4", "intensity4_time",
"intensity5", "intensity5_time", "intensity6", "intensity6_time",
"intensity7", "intensity7_time", "intensity8", "intensity8_time",
"intensity9", "intensity9_time", "intensity10", "intensity10_time",
"zstart", "zend", "zDuration", "zPhonelength", "zmeanPitch",
"zmaxPitch", "zmaxPitTime", "zminPitch", "zminPitTime", "zmeanIntensity",
"zmaxIntensity", "zmaxIntTime","response","meanpitch","maxpitch","firstpitch","secondpitch","thirdpitch","fourthpitch","zmeanpitch","zmaxpitch","zfirstpitch","zsecondpitch","zthirdpitch","zfourthpitch")
nColumns=ncol(df)
for (i in 1:nColumns) {
if (colnames(df)[i] %in% factorCols) {
df[,i]<- as.factor(as.character(df[,i]))
}
if (colnames(df)[i]  %in% numericCols) {
df[,i]<- as.numeric(as.character(df[,i]))
}
}
return(df)
}
responses=read.csv(paste(pathData,"til_responses.txt",sep=""),sep = "\t")
responses$Condition=car::recode(responses$answerFile,"c('duration.wav','duration2.wav')='Duration';c('durationpause.wav', 'durationpause2.wav')='DurationPause'; c('identical.wav', 'identical2.wav')='Identical'; c('identicalpause.wav', 'identicalpause2.wav')='IdenticalPause'; c('intensity.wav', 'intensity2.wav')='Intensity'; c('intensitypause.wav', 'intensitypause2.wav')='IntensityPause'; c('pauseduration.wav', 'pauseduration2.wav')='PauseDuration'; c('pauseintensity.wav', 'pauseintensity2.wav')='PauseIntensity'; c('pausepitch.wav', 'pausepitch2.wav')='PausePitch'; c('pitch.wav', 'pitch2.wav')='Pitch'; c('pitchpause.wav', 'pitchpause2.wav')='PitchPause'")
responses$StimulusSet=car::recode(responses$answerFile,"c('duration2.wav', 'durationpause2.wav', 'identical2.wav',  'identicalpause2.wav', 'intensity2.wav',  'intensitypause2.wav', 'pauseduration2.wav', 'pauseintensity2.wav', 'pausepitch2.wav', 'pitch2.wav', 'pitchpause2.wav')='Second';else='First'")
responses=filter(responses,experiment=='til')
responses$Trochaic=ifelse(responses$response=='(X x)',1,0)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
#
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_grid(. ~ StimulusSet)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=StimulusSet, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_wrap(~participant)
ggplot(responses, aes(x=Condition, y=correct)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15) + facet_wrap(~participant)
ggplot(responses, aes(x=Condition, y=Trochaic)) + stat_summary(fun.y=mean, geom="bar")  + stat_summary(fun.data = "mean_cl_boot", geom="errorbar",size=0.6, width=.15)
source('~/.active-rstudio-document', echo=TRUE)
2076/117.5
118*17.67
